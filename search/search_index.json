{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to salmongis","text":"<p>A geospatial package</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://GISCreations.github.io/salmongis</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#salmongis.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>salmongis/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/GISCreations/salmongis/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>salmongis could always use more documentation, whether as part of the official salmongis docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/GISCreations/salmongis/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up salmongis for local development.</p> <ol> <li> <p>Fork the salmongis repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/salmongis.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv salmongis\n$ cd salmongis/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 salmongis tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/GISCreations/salmongis/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>This module provides a custom map class extending folium.Map!</p>"},{"location":"foliumap/#salmongis.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom map class extending folium.Map.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"\n    A custom map class extending folium.Map.\n    \"\"\"\n\n    def __init__(self, center: Tuple[float, float] = (0, 0), zoom: int = 2, **kwargs) -&gt; None:\n        \"\"\"\n        Initializes the map with a given center and zoom level.\n\n        Args:\n            center (tuple): The initial center of the map as (latitude, longitude).\n            zoom (int): The initial zoom level of the map.\n            **kwargs: Additional keyword arguments for folium.Map.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n        folium.LayerControl().add_to(self)\n\n    def add_geojson(\n        self,\n        data: Union[str, Dict],\n        zoom_to_layer: bool = True,\n        hover_style: Dict = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        else:\n            raise ValueError(\"Invalid data type\")\n\n        geojson_layer = folium.GeoJson(data=geojson, **kwargs)\n        geojson_layer.add_to(self)\n\n    def add_shp(self, data: str, **kwargs) -&gt; None:\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf: gpd.GeoDataFrame, **kwargs) -&gt; None:\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_basemap(self, basemap: str = \"OpenStreetMap\") -&gt; None:\n        \"\"\"\n        Adds a basemap layer to the map.\n\n        Args:\n            basemap (str): The name of the basemap to add. Options include:\n                \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\".\n                Defaults to \"OpenStreetMap\".\n        \"\"\"\n        basemaps = {\n            \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            \"Stamen Terrain\": \"http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.png\",\n            \"Stamen Toner\": \"http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png\",\n            \"Stamen Watercolor\": \"http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg\",\n        }\n        folium.TileLayer(\n            tiles=basemaps.get(basemap, basemaps[\"OpenStreetMap\"]), attr=basemap\n        ).add_to(self)\n\n    def add_vector(self, data: Union[str, gpd.GeoDataFrame, Dict], **kwargs) -&gt; None:\n        \"\"\"\n        Adds a vector layer to the map from various data formats.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data to add. Can be:\n                - A file path or URL to a GeoJSON or shapefile.\n                - A GeoDataFrame.\n                - A GeoJSON-like dictionary.\n            **kwargs: Additional keyword arguments for folium.GeoJson.\n\n        Raises:\n            ValueError: If the data type is not supported.\n        \"\"\"\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self) -&gt; None:\n        \"\"\"\n        Adds a layer control widget to the map.\n\n        The layer control allows users to toggle visibility of layers on the map.\n        \"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_split_map(self, left_basemap: str, right_basemap: str) -&gt; None:\n        \"\"\"\n        Adds a split map to the map, displaying two basemaps side by side.\n\n        Args:\n            left_basemap (str): The name of the basemap to display on the left side.\n            right_basemap (str): The name of the basemap to display on the right side.\n\n        Raises:\n            ValueError: If the provided basemap names are not supported.\n        \"\"\" \n        attr = (\n        '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; '\n        'contributors, &amp;copy; &lt;a href=\"https://cartodb.com/attributions\"&gt;CartoDB&lt;/a&gt;'\n)\n\n        layer_right = folium.TileLayer(left_basemap, attr=attr)\n        layer_left = folium.TileLayer(right_basemap, attr=attr)\n\n        sbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)\n        self.add_child(sbs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.__init__","title":"<code>__init__(self, center=(0, 0), zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map with a given center and zoom level.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The initial center of the map as (latitude, longitude).</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map.</p> <code>2</code> <code>**kwargs</code> <p>Additional keyword arguments for folium.Map.</p> <code>{}</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def __init__(self, center: Tuple[float, float] = (0, 0), zoom: int = 2, **kwargs) -&gt; None:\n    \"\"\"\n    Initializes the map with a given center and zoom level.\n\n    Args:\n        center (tuple): The initial center of the map as (latitude, longitude).\n        zoom (int): The initial zoom level of the map.\n        **kwargs: Additional keyword arguments for folium.Map.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Adds a basemap layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap to add. Options include: \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\". Defaults to \"OpenStreetMap\".</p> <code>'OpenStreetMap'</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_basemap(self, basemap: str = \"OpenStreetMap\") -&gt; None:\n    \"\"\"\n    Adds a basemap layer to the map.\n\n    Args:\n        basemap (str): The name of the basemap to add. Options include:\n            \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\".\n            Defaults to \"OpenStreetMap\".\n    \"\"\"\n    basemaps = {\n        \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"Stamen Terrain\": \"http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.png\",\n        \"Stamen Toner\": \"http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png\",\n        \"Stamen Watercolor\": \"http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg\",\n    }\n    folium.TileLayer(\n        tiles=basemaps.get(basemap, basemaps[\"OpenStreetMap\"]), attr=basemap\n    ).add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_gdf(self, gdf: gpd.GeoDataFrame, **kwargs) -&gt; None:\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.GeoJson layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_geojson(\n    self,\n    data: Union[str, Dict],\n    zoom_to_layer: bool = True,\n    hover_style: Dict = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n    else:\n        raise ValueError(\"Invalid data type\")\n\n    geojson_layer = folium.GeoJson(data=geojson, **kwargs)\n    geojson_layer.add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> <p>The layer control allows users to toggle visibility of layers on the map.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_layer_control(self) -&gt; None:\n    \"\"\"\n    Adds a layer control widget to the map.\n\n    The layer control allows users to toggle visibility of layers on the map.\n    \"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_shp(self, data: str, **kwargs) -&gt; None:\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left_basemap, right_basemap)</code>","text":"<p>Adds a split map to the map, displaying two basemaps side by side.</p> <p>Parameters:</p> Name Type Description Default <code>left_basemap</code> <code>str</code> <p>The name of the basemap to display on the left side.</p> required <code>right_basemap</code> <code>str</code> <p>The name of the basemap to display on the right side.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the provided basemap names are not supported.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>    def add_split_map(self, left_basemap: str, right_basemap: str) -&gt; None:\n        \"\"\"\n        Adds a split map to the map, displaying two basemaps side by side.\n\n        Args:\n            left_basemap (str): The name of the basemap to display on the left side.\n            right_basemap (str): The name of the basemap to display on the right side.\n\n        Raises:\n            ValueError: If the provided basemap names are not supported.\n        \"\"\" \n        attr = (\n        '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; '\n        'contributors, &amp;copy; &lt;a href=\"https://cartodb.com/attributions\"&gt;CartoDB&lt;/a&gt;'\n)\n\n        layer_right = folium.TileLayer(left_basemap, attr=attr)\n        layer_left = folium.TileLayer(right_basemap, attr=attr)\n\n        sbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)\n        self.add_child(sbs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds a vector layer to the map from various data formats.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data to add. Can be: - A file path or URL to a GeoJSON or shapefile. - A GeoDataFrame. - A GeoJSON-like dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for folium.GeoJson.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is not supported.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_vector(self, data: Union[str, gpd.GeoDataFrame, Dict], **kwargs) -&gt; None:\n    \"\"\"\n    Adds a vector layer to the map from various data formats.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data to add. Can be:\n            - A file path or URL to a GeoJSON or shapefile.\n            - A GeoDataFrame.\n            - A GeoJSON-like dictionary.\n        **kwargs: Additional keyword arguments for folium.GeoJson.\n\n    Raises:\n        ValueError: If the data type is not supported.\n    \"\"\"\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install salmongis, run this command in your terminal:</p> <pre><code>pip install salmongis\n</code></pre> <p>This is the preferred method to install salmongis, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install salmongis from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/GISCreations/salmongis\n</code></pre>"},{"location":"salmongis/","title":"salmongis module","text":"<p>Main module.</p>"},{"location":"salmongis/#salmongis.salmongis.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom map class extending ipyleaflet.Map.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"A custom map class extending ipyleaflet.Map.\"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"\n        Initializes the map with a given center, zoom level, and height.\n\n        Args:\n            center (list): The initial center of the map as [latitude, longitude].\n            zoom (int): The initial zoom level of the map.\n            height (str): The height of the map in pixels or percentage.\n            **kwargs: Additional keyword arguments for ipyleaflet.Map.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"\n        Adds a basemap layer to the map.\n\n        Args:\n            basemap (str): The name of the basemap to add. Must be a valid basemap\n                available in ipyleaflet.basemaps.\n        \"\"\"\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control widget to the map.\n\n        The layer control allows users to toggle visibility of layers on the map.\n        \"\"\"\n        control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add(control)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"\n        Adds a Google Maps layer to the map.\n\n        Args:\n            map_type (str): The type of Google Map to add. Options are:\n                \"ROADMAP\", \"SATELLITE\", \"TERRAIN\", \"HYBRID\".\n        \"\"\"\n        map_types = {\n            \"ROADMAP\": \"m\",\n            \"SATELLITE\": \"s\",\n            \"TERRAIN\": \"p\",\n            \"HYBRID\": \"y\",\n        }\n\n        map_type = map_types[map_type]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(ur1=url, name=\"Google Map\")\n        self.add(layer)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"\n        Adds a vector layer to the map from a GeoJSON or file.\n\n        Args:\n            data (str): The path or URL to the vector data (e.g., GeoJSON file).\n            **kwargs: Additional keyword arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n        import geopandas as gpd\n\n        # Load the data into a GeoDataFrame\n        gdf = gpd.read_file(data)\n\n        # Reproject to EPSG:4326\n        gdf = gdf.to_crs(epsg=4326)\n\n        # Convert to GeoJSON\n        geojson = gdf.__geo_interface__\n\n        # Add the GeoJSON layer to the map\n        self.add_layer(ipyleaflet.GeoJSON(data=geojson, **kwargs))\n\n    def add_raster(self, filepath, **kwargs):\n        from localtileserver import TileClient, get_leaflet_tile_layer \n        client = TileClient(filepath)\n        tile_layer = get_leaflet_tile_layer(client, **kwargs)\n        self = Map(zoom=3)\n        self.add(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image (self, image, bounds=None, **kwargs):\n        \"\"\"Adds an image to the map.\n        Args: image (str): The file path to the image.\n\n        bounds (list, optional): The bounds for the image. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet. ImageOverlay layer.\n        \"\"\"\n        if bounds is None: \n            bounds = [[-90, -180] [90,1801]]\n        overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n        self.add(overlay)\n\n    def add_video(self, video, bounds = None, **kwargs):\n        \"\"\"Adds a video to the map.\n        Args: video (str): The file path to the video.\n\n        bounds (list, optional): The bounds for the video. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet. VideoOverlay layer.\n        \"\"\"\n        if bounds is None: \n            bounds = [[-90, -180] [90, 180]]\n        overlay = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n        self.add(overlay)\n\n    def add_wms_layer(self, url, layers, format = \"image/png\", transparent = True, **kwargs):\n        \"\"\"\n        Adds a WMS layer to the map.\n\n        Args:\n            url (str): The WMS service URL.\n            layers (str): The layers to be displayed.\n            **kwargs: Additional keyword arguments for ipyleaflet.WMSLayer.\n        \"\"\"\n        wms_layer = ipyleaflet.WMSLayer(url=url, layers=layers, format = format, transparent = transparent,  **kwargs)\n        self.add(wms_layer)\n\n    def add_basemap_gui(self, options=None, position=\"topright\"):\n        \"\"\"\n        Adds a graphical user interface (GUI) for selecting and switching basemaps.\n\n        This function creates a toggle button, dropdown menu, and close button\n        to allow users to interactively select a basemap from a predefined list\n        and apply it to the map.\n\n        Args:\n            options (list, optional): A list of basemap names (strings) to display\n                in the dropdown menu. Defaults to a list of common basemaps:\n                [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n            position (str, optional): The position of the GUI widget on the map.\n                Defaults to \"topright\". Valid positions include \"topleft\", \"topright\",\n                \"bottomleft\", and \"bottomright\".\n\n        Returns:\n            None\n        \"\"\"\n        if options is None:\n            options = [\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n            ]\n\n        toggle = widgets.ToggleButton(\n            value=True,\n            button_style=\"\",\n            tooltip=\"Click me\",\n            icon=\"map\",\n        )\n        toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        dropdown = widgets.Dropdown(\n            options=options,\n            value=options[0],\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n        )\n        dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n        button = widgets.Button(\n            icon=\"times\",\n        )\n        button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        hbox = widgets.HBox([toggle, dropdown, button])\n\n        def on_toggle_change(change):\n            if change[\"new\"]:\n                hbox.children = [toggle, dropdown, button]\n            else:\n                hbox.children = [toggle]\n\n        toggle.observe(on_toggle_change, names=\"value\")\n\n        def on_button_click(b):\n            hbox.close()\n            toggle.close()\n            dropdown.close()\n            button.close()\n\n        button.on_click(on_button_click)\n\n        def on_dropdown_change(change):\n            if change[\"new\"]:\n                self.layers = self.layers[:-2]\n                self.add_basemap(change[\"new\"])\n\n        dropdown.observe(on_dropdown_change, names=\"value\")\n\n        control = ipyleaflet.WidgetControl(widget=hbox, position=position)\n        self.add(control)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map with a given center, zoom level, and height.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The initial center of the map as [latitude, longitude].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map.</p> <code>2</code> <code>height</code> <code>str</code> <p>The height of the map in pixels or percentage.</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.Map.</p> <code>{}</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"\n    Initializes the map with a given center, zoom level, and height.\n\n    Args:\n        center (list): The initial center of the map as [latitude, longitude].\n        zoom (int): The initial zoom level of the map.\n        height (str): The height of the map in pixels or percentage.\n        **kwargs: Additional keyword arguments for ipyleaflet.Map.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Adds a basemap layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap to add. Must be a valid basemap available in ipyleaflet.basemaps.</p> <code>'OpenTopoMap'</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"\n    Adds a basemap layer to the map.\n\n    Args:\n        basemap (str): The name of the basemap to add. Must be a valid basemap\n            available in ipyleaflet.basemaps.\n    \"\"\"\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add_layer(layer)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, options=None, position='topright')</code>","text":"<p>Adds a graphical user interface (GUI) for selecting and switching basemaps.</p> <p>This function creates a toggle button, dropdown menu, and close button to allow users to interactively select a basemap from a predefined list and apply it to the map.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>list</code> <p>A list of basemap names (strings) to display in the dropdown menu. Defaults to a list of common basemaps: [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].</p> <code>None</code> <code>position</code> <code>str</code> <p>The position of the GUI widget on the map. Defaults to \"topright\". Valid positions include \"topleft\", \"topright\", \"bottomleft\", and \"bottomright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_basemap_gui(self, options=None, position=\"topright\"):\n    \"\"\"\n    Adds a graphical user interface (GUI) for selecting and switching basemaps.\n\n    This function creates a toggle button, dropdown menu, and close button\n    to allow users to interactively select a basemap from a predefined list\n    and apply it to the map.\n\n    Args:\n        options (list, optional): A list of basemap names (strings) to display\n            in the dropdown menu. Defaults to a list of common basemaps:\n            [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n        position (str, optional): The position of the GUI widget on the map.\n            Defaults to \"topright\". Valid positions include \"topleft\", \"topright\",\n            \"bottomleft\", and \"bottomright\".\n\n    Returns:\n        None\n    \"\"\"\n    if options is None:\n        options = [\n            \"OpenStreetMap.Mapnik\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n        ]\n\n    toggle = widgets.ToggleButton(\n        value=True,\n        button_style=\"\",\n        tooltip=\"Click me\",\n        icon=\"map\",\n    )\n    toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    dropdown = widgets.Dropdown(\n        options=options,\n        value=options[0],\n        description=\"Basemap:\",\n        style={\"description_width\": \"initial\"},\n    )\n    dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n    button = widgets.Button(\n        icon=\"times\",\n    )\n    button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    hbox = widgets.HBox([toggle, dropdown, button])\n\n    def on_toggle_change(change):\n        if change[\"new\"]:\n            hbox.children = [toggle, dropdown, button]\n        else:\n            hbox.children = [toggle]\n\n    toggle.observe(on_toggle_change, names=\"value\")\n\n    def on_button_click(b):\n        hbox.close()\n        toggle.close()\n        dropdown.close()\n        button.close()\n\n    button.on_click(on_button_click)\n\n    def on_dropdown_change(change):\n        if change[\"new\"]:\n            self.layers = self.layers[:-2]\n            self.add_basemap(change[\"new\"])\n\n    dropdown.observe(on_dropdown_change, names=\"value\")\n\n    control = ipyleaflet.WidgetControl(widget=hbox, position=position)\n    self.add(control)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Adds a Google Maps layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>The type of Google Map to add. Options are: \"ROADMAP\", \"SATELLITE\", \"TERRAIN\", \"HYBRID\".</p> <code>'ROADMAP'</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"\n    Adds a Google Maps layer to the map.\n\n    Args:\n        map_type (str): The type of Google Map to add. Options are:\n            \"ROADMAP\", \"SATELLITE\", \"TERRAIN\", \"HYBRID\".\n    \"\"\"\n    map_types = {\n        \"ROADMAP\": \"m\",\n        \"SATELLITE\": \"s\",\n        \"TERRAIN\": \"p\",\n        \"HYBRID\": \"y\",\n    }\n\n    map_type = map_types[map_type]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(ur1=url, name=\"Google Map\")\n    self.add(layer)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_image","title":"<code>add_image(self, image, bounds=None, **kwargs)</code>","text":"<p>Adds an image to the map.</p> <p>image (str): The file path to the image.</p> <p>bounds (list, optional): The bounds for the image. Defaults to None. **kwargs: Additional keyword arguments for the ipyleaflet. ImageOverlay layer.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_image (self, image, bounds=None, **kwargs):\n    \"\"\"Adds an image to the map.\n    Args: image (str): The file path to the image.\n\n    bounds (list, optional): The bounds for the image. Defaults to None.\n    **kwargs: Additional keyword arguments for the ipyleaflet. ImageOverlay layer.\n    \"\"\"\n    if bounds is None: \n        bounds = [[-90, -180] [90,1801]]\n    overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n    self.add(overlay)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> <p>The layer control allows users to toggle visibility of layers on the map.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control widget to the map.\n\n    The layer control allows users to toggle visibility of layers on the map.\n    \"\"\"\n    control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add(control)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds a vector layer to the map from a GeoJSON or file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path or URL to the vector data (e.g., GeoJSON file).</p> required <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"\n    Adds a vector layer to the map from a GeoJSON or file.\n\n    Args:\n        data (str): The path or URL to the vector data (e.g., GeoJSON file).\n        **kwargs: Additional keyword arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n    import geopandas as gpd\n\n    # Load the data into a GeoDataFrame\n    gdf = gpd.read_file(data)\n\n    # Reproject to EPSG:4326\n    gdf = gdf.to_crs(epsg=4326)\n\n    # Convert to GeoJSON\n    geojson = gdf.__geo_interface__\n\n    # Add the GeoJSON layer to the map\n    self.add_layer(ipyleaflet.GeoJSON(data=geojson, **kwargs))\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_video","title":"<code>add_video(self, video, bounds=None, **kwargs)</code>","text":"<p>Adds a video to the map.</p> <p>video (str): The file path to the video.</p> <p>bounds (list, optional): The bounds for the video. Defaults to None. **kwargs: Additional keyword arguments for the ipyleaflet. VideoOverlay layer.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_video(self, video, bounds = None, **kwargs):\n    \"\"\"Adds a video to the map.\n    Args: video (str): The file path to the video.\n\n    bounds (list, optional): The bounds for the video. Defaults to None.\n    **kwargs: Additional keyword arguments for the ipyleaflet. VideoOverlay layer.\n    \"\"\"\n    if bounds is None: \n        bounds = [[-90, -180] [90, 180]]\n    overlay = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n    self.add(overlay)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Adds a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The WMS service URL.</p> required <code>layers</code> <code>str</code> <p>The layers to be displayed.</p> required <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.WMSLayer.</p> <code>{}</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_wms_layer(self, url, layers, format = \"image/png\", transparent = True, **kwargs):\n    \"\"\"\n    Adds a WMS layer to the map.\n\n    Args:\n        url (str): The WMS service URL.\n        layers (str): The layers to be displayed.\n        **kwargs: Additional keyword arguments for ipyleaflet.WMSLayer.\n    \"\"\"\n    wms_layer = ipyleaflet.WMSLayer(url=url, layers=layers, format = format, transparent = transparent,  **kwargs)\n    self.add(wms_layer)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use salmongis in a project:</p> <pre><code>import salmongis\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import salmongis.foliumap as salmongis\n</pre> import salmongis.foliumap as salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=[20, -180], zoom=2)\nurl = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\nm.add_geojson(url)\nm.add_layer_control()\nm\n</pre> m = salmongis.Map(center=[20, -180], zoom=2) url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" m.add_geojson(url) m.add_layer_control() m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>m = salmongis.Map(center=(40, -100), zoom=4)\nm.add_split_map(\"OpenStreetMap\", \"Stamen Terrain\")\nm\n</pre> m = salmongis.Map(center=(40, -100), zoom=4) m.add_split_map(\"OpenStreetMap\", \"Stamen Terrain\") m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/folium/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[\u00a0]: Copied! In\u00a0[1]: Copied! <pre>import salmongis\n</pre> import salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=[40, -100], zoom=4)\nm.add_basemap(basemap=\"Gaode.Satellite\")\nm.add_layer_control()\nm.add_vector(\n    \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\n)\nm\n</pre> m = salmongis.Map(center=[40, -100], zoom=4) m.add_basemap(basemap=\"Gaode.Satellite\") m.add_layer_control() m.add_vector(     \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" ) m Out[2]: In\u00a0[3]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = [38.128, 2.588]\nzoom = 5\nMap(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom)\n</pre> from ipyleaflet import Map, basemaps  center = [38.128, 2.588] zoom = 5 Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom) Out[3]: In\u00a0[4]: Copied! <pre>basemaps.OpenTopoMap.url\n</pre> basemaps.OpenTopoMap.url Out[4]: <pre>'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png'</pre> In\u00a0[5]: Copied! <pre>from salmongis import salmongis\n</pre> from salmongis import salmongis In\u00a0[6]: Copied! <pre>import salmongis.salmongis as salmongis\n</pre> import salmongis.salmongis as salmongis In\u00a0[7]: Copied! <pre>m = salmongis.Map()\nm\n</pre> m = salmongis.Map() m Out[7]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> Out[\u00a0]: <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre>"},{"location":"examples/ipyleaflet/#ipyleaflet-demo","title":"Ipyleaflet demo\u00b6","text":"<p>](https: //github.com/GISCreations/salmongis/tree/main/docs/examples/ipyleaflet.ipynb)</p>"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import salmongis\n</pre> import salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=[40, -100], zoom=4)\nm.add_layer_control()\nm\n</pre> m = salmongis.Map(center=[40, -100], zoom=4) m.add_layer_control() m Out[2]: In\u00a0[3]: Copied! <pre>filename = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\"\nm.add_raster(filename, indexes=[5, 4, 3,], name=\"landsat\", opacity=0.5)\n</pre> filename = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\" m.add_raster(filename, indexes=[5, 4, 3,], name=\"landsat\", opacity=0.5) In\u00a0[4]: Copied! <pre>url=\"https://geography.utk.edu/wp-content/uploads/2023/10/Michael_Camponovo.800x1200.webp\"\nbounds= ( (13, -150), (40, -120) )\nm.add_image(url, bounds)\nm\n</pre> url=\"https://geography.utk.edu/wp-content/uploads/2023/10/Michael_Camponovo.800x1200.webp\" bounds= ( (13, -150), (40, -120) ) m.add_image(url, bounds) m Out[4]: In\u00a0[5]: Copied! <pre>url=\"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\"\nlayers = \"USGSNAIPPlus:FalseColorComposite\"\nm.add_wms_layer(url, layers, format = \"image/png\", transparent=True)\nm\n</pre> url=\"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\" layers = \"USGSNAIPPlus:FalseColorComposite\" m.add_wms_layer(url, layers, format = \"image/png\", transparent=True) m Out[5]: In\u00a0[6]: Copied! <pre>url = \"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\"\nbounds = ((37.56238816, -122.515963), (37.563391708, -122.5130939))\nm.add_video(url, bounds)\nm\n</pre> url = \"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\" bounds = ((37.56238816, -122.515963), (37.563391708, -122.5130939)) m.add_video(url, bounds) m Out[6]:"},{"location":"examples/raster/#raster-video-image-demo","title":"Raster / Video / Image Demo\u00b6","text":""},{"location":"examples/split_map/","title":"Split map","text":"In\u00a0[1]: Copied! <pre>import salmongis.foliumap as salmongis\n</pre> import salmongis.foliumap as salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=(40, -100), zoom=4)\nm.add_split_map(\"OpenStreetMap\", \"Stamen Toner\")\nm\n</pre> m = salmongis.Map(center=(40, -100), zoom=4) m.add_split_map(\"OpenStreetMap\", \"Stamen Toner\") m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/widgets/","title":"Widgets","text":"In\u00a0[1]: Copied! <pre>import salmongis\n</pre> import salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=[40, -100], zoom=4)\nm.add_basemap_gui()\nm\n</pre> m = salmongis.Map(center=[40, -100], zoom=4) m.add_basemap_gui() m Out[2]:"},{"location":"examples/widgets/#widget-basemaps-demo","title":"Widget Basemaps demo\u00b6","text":"<p>](https: //github.com/GISCreations/salmongis/tree/main/docs/examples/widgets.ipynb)</p>"}]}