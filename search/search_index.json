{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to salmongis","text":"<p>A geospatial package for researchers and gis developers to easily visualize data</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://GISCreations.github.io/salmongis</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Dynamic file manipulation within ipyleaflet maps</li> <li>Ability to add images, COGS, and GEOJSON files directly into maps</li> <li>Change map title without hard coding!</li> <li></li> </ul>"},{"location":"#requirements","title":"Requirements:","text":"<ul> <li>folium</li> <li>geopandas</li> <li>ipyleaflet</li> <li>leafmap</li> <li>localtileserver</li> <li>matplotlib</li> <li>numpy</li> <li>ipywidgets</li> <li>xarray</li> <li>pandas</li> <li>netcdf4</li> <li>h5netcdf</li> <li>scipy</li> <li>ipyfilechooser</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>Removed some bugs with the collapsable menu</li> <li>Added the ability to change image bounds through sliders</li> </ul> <p>New Features:</p> <ul> <li>Dynamic file manipulation within ipyleaflet maps</li> <li>Ability to add images, COGS, and GEOJSON files directly into maps</li> <li>Change map title without hard coding!</li> <li>Ability to change the basemap</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#salmongis.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>salmongis/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/GISCreations/salmongis/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>salmongis could always use more documentation, whether as part of the official salmongis docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/GISCreations/salmongis/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up salmongis for local development.</p> <ol> <li> <p>Fork the salmongis repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/salmongis.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv salmongis\n$ cd salmongis/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 salmongis tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/GISCreations/salmongis/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>This module provides a custom map class extending folium.Map!</p>"},{"location":"foliumap/#salmongis.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom map class extending folium.Map.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"\n    A custom map class extending folium.Map.\n    \"\"\"\n\n    def __init__(self, center: Tuple[float, float] = (0, 0), zoom: int = 2, **kwargs) -&gt; None:\n        \"\"\"\n        Initializes the map with a given center and zoom level.\n\n        Args:\n            center (tuple): The initial center of the map as (latitude, longitude).\n            zoom (int): The initial zoom level of the map.\n            **kwargs: Additional keyword arguments for folium.Map.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n        folium.LayerControl().add_to(self)\n\n    def add_geojson(\n        self,\n        data: Union[str, Dict],\n        zoom_to_layer: bool = True,\n        hover_style: Dict = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        else:\n            raise ValueError(\"Invalid data type\")\n\n        geojson_layer = folium.GeoJson(data=geojson, **kwargs)\n        geojson_layer.add_to(self)\n\n    def add_shp(self, data: str, **kwargs) -&gt; None:\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf: gpd.GeoDataFrame, **kwargs) -&gt; None:\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_basemap(self, basemap: str = \"OpenStreetMap\") -&gt; None:\n        \"\"\"\n        Adds a basemap layer to the map.\n\n        Args:\n            basemap (str): The name of the basemap to add. Options include:\n                \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\".\n                Defaults to \"OpenStreetMap\".\n        \"\"\"\n        basemaps = {\n            \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            \"Stamen Terrain\": \"http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.png\",\n            \"Stamen Toner\": \"http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png\",\n            \"Stamen Watercolor\": \"http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg\",\n        }\n        folium.TileLayer(\n            tiles=basemaps.get(basemap, basemaps[\"OpenStreetMap\"]), attr=basemap\n        ).add_to(self)\n\n    def add_vector(self, data: Union[str, gpd.GeoDataFrame, Dict], **kwargs) -&gt; None:\n        \"\"\"\n        Adds a vector layer to the map from various data formats.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data to add. Can be:\n                - A file path or URL to a GeoJSON or shapefile.\n                - A GeoDataFrame.\n                - A GeoJSON-like dictionary.\n            **kwargs: Additional keyword arguments for folium.GeoJson.\n\n        Raises:\n            ValueError: If the data type is not supported.\n        \"\"\"\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self) -&gt; None:\n        \"\"\"\n        Adds a layer control widget to the map.\n\n        The layer control allows users to toggle visibility of layers on the map.\n        \"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_split_map(self, left_basemap: str, right_basemap: str) -&gt; None:\n        \"\"\"\n        Adds a split map to the map, displaying two basemaps side by side.\n\n        Args:\n            left_basemap (str): The name of the basemap to display on the left side.\n            right_basemap (str): The name of the basemap to display on the right side.\n\n        Raises:\n            ValueError: If the provided basemap names are not supported.\n        \"\"\" \n        attr = (\n        '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; '\n        'contributors, &amp;copy; &lt;a href=\"https://cartodb.com/attributions\"&gt;CartoDB&lt;/a&gt;'\n)\n\n        layer_right = folium.TileLayer(left_basemap, attr=attr)\n        layer_left = folium.TileLayer(right_basemap, attr=attr)\n\n        sbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)\n        self.add_child(sbs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.__init__","title":"<code>__init__(self, center=(0, 0), zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map with a given center and zoom level.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The initial center of the map as (latitude, longitude).</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map.</p> <code>2</code> <code>**kwargs</code> <p>Additional keyword arguments for folium.Map.</p> <code>{}</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def __init__(self, center: Tuple[float, float] = (0, 0), zoom: int = 2, **kwargs) -&gt; None:\n    \"\"\"\n    Initializes the map with a given center and zoom level.\n\n    Args:\n        center (tuple): The initial center of the map as (latitude, longitude).\n        zoom (int): The initial zoom level of the map.\n        **kwargs: Additional keyword arguments for folium.Map.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Adds a basemap layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap to add. Options include: \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\". Defaults to \"OpenStreetMap\".</p> <code>'OpenStreetMap'</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_basemap(self, basemap: str = \"OpenStreetMap\") -&gt; None:\n    \"\"\"\n    Adds a basemap layer to the map.\n\n    Args:\n        basemap (str): The name of the basemap to add. Options include:\n            \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\".\n            Defaults to \"OpenStreetMap\".\n    \"\"\"\n    basemaps = {\n        \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"Stamen Terrain\": \"http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.png\",\n        \"Stamen Toner\": \"http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png\",\n        \"Stamen Watercolor\": \"http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg\",\n    }\n    folium.TileLayer(\n        tiles=basemaps.get(basemap, basemaps[\"OpenStreetMap\"]), attr=basemap\n    ).add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_gdf(self, gdf: gpd.GeoDataFrame, **kwargs) -&gt; None:\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the folium.GeoJson layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_geojson(\n    self,\n    data: Union[str, Dict],\n    zoom_to_layer: bool = True,\n    hover_style: Dict = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the folium.GeoJson layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n    else:\n        raise ValueError(\"Invalid data type\")\n\n    geojson_layer = folium.GeoJson(data=geojson, **kwargs)\n    geojson_layer.add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> <p>The layer control allows users to toggle visibility of layers on the map.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_layer_control(self) -&gt; None:\n    \"\"\"\n    Adds a layer control widget to the map.\n\n    The layer control allows users to toggle visibility of layers on the map.\n    \"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_shp(self, data: str, **kwargs) -&gt; None:\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left_basemap, right_basemap)</code>","text":"<p>Adds a split map to the map, displaying two basemaps side by side.</p> <p>Parameters:</p> Name Type Description Default <code>left_basemap</code> <code>str</code> <p>The name of the basemap to display on the left side.</p> required <code>right_basemap</code> <code>str</code> <p>The name of the basemap to display on the right side.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the provided basemap names are not supported.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>    def add_split_map(self, left_basemap: str, right_basemap: str) -&gt; None:\n        \"\"\"\n        Adds a split map to the map, displaying two basemaps side by side.\n\n        Args:\n            left_basemap (str): The name of the basemap to display on the left side.\n            right_basemap (str): The name of the basemap to display on the right side.\n\n        Raises:\n            ValueError: If the provided basemap names are not supported.\n        \"\"\" \n        attr = (\n        '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; '\n        'contributors, &amp;copy; &lt;a href=\"https://cartodb.com/attributions\"&gt;CartoDB&lt;/a&gt;'\n)\n\n        layer_right = folium.TileLayer(left_basemap, attr=attr)\n        layer_left = folium.TileLayer(right_basemap, attr=attr)\n\n        sbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)\n        self.add_child(sbs)\n</code></pre>"},{"location":"foliumap/#salmongis.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds a vector layer to the map from various data formats.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data to add. Can be: - A file path or URL to a GeoJSON or shapefile. - A GeoDataFrame. - A GeoJSON-like dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for folium.GeoJson.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is not supported.</p> Source code in <code>salmongis/foliumap.py</code> <pre><code>def add_vector(self, data: Union[str, gpd.GeoDataFrame, Dict], **kwargs) -&gt; None:\n    \"\"\"\n    Adds a vector layer to the map from various data formats.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data to add. Can be:\n            - A file path or URL to a GeoJSON or shapefile.\n            - A GeoDataFrame.\n            - A GeoJSON-like dictionary.\n        **kwargs: Additional keyword arguments for folium.GeoJson.\n\n    Raises:\n        ValueError: If the data type is not supported.\n    \"\"\"\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"graphs/","title":"graphs module","text":"<p>This module provides a custom <code>Map</code> class that extends <code>ipyleaflet.Map</code> to include additional functionality such as adding images, videos, COGs, GeoJSON layers, and a collapsible menu.</p>"},{"location":"graphs/#salmongis.graphs.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom map class extending <code>ipyleaflet.Map</code>.</p> Source code in <code>salmongis/graphs.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"A custom map class extending `ipyleaflet.Map`.\"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"\n        Initializes the map with a given center, zoom level, and height.\n\n        Args:\n            center (list): The initial center of the map as [latitude, longitude].\n            zoom (int): The initial zoom level of the map.\n            height (str): The height of the map in pixels or percentage.\n            **kwargs: Additional keyword arguments for `ipyleaflet.Map`.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n\n    def add_combined_ui(self, options=None, video_options=None, video_bounds=None, cog_options=None, geojson_options=None, title=\"Map Title\", position=\"topleft\", font_size=\"16px\", font_color=\"black\"):\n        \"\"\"\n        Combines all functionalities (image GUI, video overlay, title, COG, GeoJSON, and basemap selector) into one unified UI with a menu.\n\n        Args:\n            options (dict, optional): A dictionary for image options where keys are image names (strings)\n                and values are tuples containing the image URL (str) and bounds (list).\n            video_options (dict, optional): A dictionary for video options where keys are video names (strings)\n                and values are file paths or URLs to the video files.\n            video_bounds (list, optional): The geographical bounds for the video overlay as [[lat_min, lon_min], [lat_max, lon_max]].\n            cog_options (dict, optional): A dictionary for COG options where keys are COG names (strings)\n                and values are URLs to the COG files.\n            geojson_options (dict, optional): A dictionary for GeoJSON options where keys are GeoJSON names (strings)\n                and values are URLs to the GeoJSON files.\n            title (str, optional): The initial text of the title to be displayed on the map. Defaults to \"Map Title\".\n            position (str, optional): The initial position of the title on the map. Defaults to \"topleft\".\n            font_size (str, optional): The initial font size of the title. Defaults to \"16px\".\n            font_color (str, optional): The initial font color of the title. Defaults to \"black\".\n\n        Returns:\n            None\n        \"\"\"\n        # Default options for images, videos, COGs, and GeoJSON\n        options = options or {\n            \"Sample Image 1\": (\"https://example.com/sample1.png\", [[-90, -180], [90, 180]]),\n            \"Sample Image 2\": (\"https://example.com/sample2.png\", [[10, -50], [20, 50]]),\n        }\n        video_options = video_options or {\n            \"Sample Video 1\": \"https://example.com/sample_video1.mp4\",\n            \"Sample Video 2\": \"https://example.com/sample_video2.mp4\",\n        }\n        video_bounds = video_bounds or [[-10, -20], [10, 20]]\n        cog_options = cog_options or {\n            \"Select a COG\": None,\n            \"COG 1\": \"https://example.com/cog1.tif\",\n            \"COG 2\": \"https://example.com/cog2.tif\",\n        }\n        geojson_options = geojson_options or {\n            \"Select a GeoJSON\": None,\n            \"World Countries\": \"https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json\",\n            \"World Cities\": \"https://github.com/opengeos/datasets/releases/download/world/world_cities.geojson\",\n        }\n\n        # Widgets for image selection\n        image_chooser = filechooser.FileChooser()\n        image_chooser.title = \"Select an image file\"\n        image_chooser.filter_pattern = [\"*.png\", \"*.jpg\", \"*.jpeg\"]  # Restrict file types\n        image_chooser.use_dir_icons = True\n\n        # Sliders for image bounds and opacity\n        lat_min_slider = widgets.FloatSlider(value=0, min=-90, max=90, step=0.1, description=\"Lat Min:\")\n        lon_min_slider = widgets.FloatSlider(value=0, min=-180, max=180, step=0.1, description=\"Lon Min:\")\n        lat_max_slider = widgets.FloatSlider(value=0, min=-90, max=90, step=0.1, description=\"Lat Max:\")\n        lon_max_slider = widgets.FloatSlider(value=0, min=-180, max=180, step=0.1, description=\"Lon Max:\")\n        image_opacity_slider = widgets.FloatSlider(value=0.8, min=0, max=1, step=0.1, description=\"Opacity:\")\n        image_sliders = widgets.VBox([lat_min_slider, lon_min_slider, lat_max_slider, lon_max_slider, image_opacity_slider])\n\n        # Widgets for video overlay\n        video_dropdown = widgets.Dropdown(\n            options=[\"Select a video\"] + list(video_options.keys()),\n            value=\"Select a video\",\n            description=\"Video:\",\n        )\n        video_opacity_slider = widgets.FloatSlider(value=0.7, min=0, max=1, step=0.1, description=\"Opacity:\")\n\n        # Widgets for COG selection\n        cog_chooser = filechooser.FileChooser()\n        cog_chooser.title = \"Select a COG file\"\n        cog_chooser.filter_pattern = [\"*.tif\", \"*.tiff\"]  # Restrict file types to TIFF\n        cog_chooser.use_dir_icons = True\n\n        cog_opacity_slider = widgets.FloatSlider(value=0.8, min=0, max=1, step=0.1, description=\"Opacity:\")\n\n        # Function to add or update the COG layer\n        def add_cog_layer(change):\n            \"\"\"\n            Adds or updates the COG layer on the map based on the selected file and opacity.\n\n            Args:\n                change: The change event triggered by the FileChooser or opacity slider.\n\n            Returns:\n                None\n            \"\"\"\n            selected_file = cog_chooser.selected\n            if not selected_file:\n                # Remove the current COG layer if no file is selected\n                if current_overlay[\"cog\"]:\n                    self.remove(current_overlay[\"cog\"])\n                    current_overlay[\"cog\"] = None\n            else:\n                # Remove the existing COG layer if it exists\n                if current_overlay[\"cog\"]:\n                    self.remove(current_overlay[\"cog\"])\n                try:\n                    # Add the new COG layer\n                    client = TileClient(selected_file)\n                    cog_layer = get_leaflet_tile_layer(client, opacity=cog_opacity_slider.value)\n                    self.add(cog_layer)\n                    current_overlay[\"cog\"] = cog_layer\n\n                    # Zoom to the bounds of the COG layer\n                    self.fit_bounds(client.bounds)\n                except Exception as e:\n                    print(f\"Error adding COG layer: {e}\")\n\n        # Observe changes in the FileChooser\n        cog_chooser.register_callback(add_cog_layer)\n\n        # Observe changes in the opacity slider\n        cog_opacity_slider.observe(add_cog_layer, names=\"value\")\n\n        # Create the COG control panel\n        cog_control_panel = widgets.VBox([cog_chooser, cog_opacity_slider])\n        cog_control = ipyleaflet.WidgetControl(widget=cog_control_panel, position=\"topright\")\n\n        # Widgets for GeoJSON selection\n        geojson_chooser = filechooser.FileChooser()\n        geojson_chooser.title = \"Select a GeoJSON file\"\n        geojson_chooser.filter_pattern = [\"*.geojson\", \"*.json\"]  # Restrict file types to GeoJSON/JSON\n        geojson_chooser.use_dir_icons = True\n\n        # Function to add or update the GeoJSON layer\n        def update_geojson(change):\n            \"\"\"\n            Adds or updates the GeoJSON layer on the map based on the selected file.\n\n            Args:\n                change: The change event triggered by the FileChooser.\n\n            Returns:\n                None\n            \"\"\"\n            selected_file = geojson_chooser.selected\n            if not selected_file:\n                # Remove the current GeoJSON layer if no file is selected\n                if current_overlay[\"geojson\"]:\n                    self.remove_layer(current_overlay[\"geojson\"])\n                    current_overlay[\"geojson\"] = None\n            else:\n                # Remove the existing GeoJSON layer if it exists\n                if current_overlay[\"geojson\"]:\n                    self.remove_layer(current_overlay[\"geojson\"])\n                try:\n                    # Load the GeoJSON data from the selected file\n                    with open(selected_file, \"r\") as f:\n                        geojson_data = f.read()\n                    geojson_layer = GeoJSON(data=json.loads(geojson_data))  # Ensure data is parsed as JSON\n                    self.add_layer(geojson_layer)\n                    current_overlay[\"geojson\"] = geojson_layer\n\n                    # Zoom to the bounds of the GeoJSON layer\n                    if hasattr(geojson_layer, \"bounds\"):\n                        self.fit_bounds(geojson_layer.bounds)\n                    else:\n                        print(\"GeoJSON layer does not have bounds.\")\n                except Exception as e:\n                    print(f\"Error loading GeoJSON: {e}\")\n\n        # Observe changes in the FileChooser\n        geojson_chooser.register_callback(update_geojson)\n\n        # Create the GeoJSON control panel\n        geojson_control_panel = widgets.VBox([geojson_chooser])\n        geojson_control = ipyleaflet.WidgetControl(widget=geojson_control_panel, position=\"topright\")\n\n\n\n        # Widgets for title\n        title_input = widgets.Text(value=title, description=\"Title:\")\n        font_size_slider = widgets.IntSlider(value=int(font_size[:-2]), min=10, max=50, step=1, description=\"Font Size:\")\n        font_color_picker = widgets.ColorPicker(value=font_color, description=\"Font Color:\")\n        position_dropdown = widgets.Dropdown(\n            options=[\"topcenter\", \"topright\", \"topleft\", \"bottomright\", \"bottomleft\"],\n            value=position,\n            description=\"Position:\",\n        )\n\n        # Title control panel\n        title_control_panel = widgets.VBox([title_input, font_size_slider, font_color_picker, position_dropdown])\n        title_control_panel_control = ipyleaflet.WidgetControl(widget=title_control_panel, position=\"bottomright\")\n\n        # Function to update the title\n        def update_title(change):\n            \"\"\"\n            Updates the title widget on the map based on user input.\n\n            Args:\n                change: The change event triggered by the widgets.\n\n            Returns:\n                None\n            \"\"\"\n            title_widget.value = (\n                f\"&lt;div style='color:{font_color_picker.value}; font-size:{font_size_slider.value}px; text-align:center;'&gt;\"\n                f\"{title_input.value}&lt;/div&gt;\"\n            )\n            if self.title_control in self.controls:\n                self.remove_control(self.title_control)\n            self.title_control = ipyleaflet.WidgetControl(widget=title_widget, position=position_dropdown.value)\n            self.add_control(self.title_control)\n\n        # Initialize the title widget\n        title_widget = widgets.HTML(\n            value=f\"&lt;div style='color:{font_color}; font-size:{font_size}; text-align:center; background-color: transparent;'&gt;{title}&lt;/div&gt;\"\n        )\n        self.title_control = ipyleaflet.WidgetControl(widget=title_widget, position=position)\n        self.add_control(self.title_control)\n\n        # Observe changes in title widgets\n        title_input.observe(update_title, names=\"value\")\n        font_size_slider.observe(update_title, names=\"value\")\n        font_color_picker.observe(update_title, names=\"value\")\n        position_dropdown.observe(update_title, names=\"value\")\n\n        # Dictionary to keep track of overlays\n        current_overlay = {\"image\": None, \"cog\": None, \"geojson\": None}\n\n        # Functions for updating the map\n        def update_image(change):\n            \"\"\"\n            Updates the image overlay on the map based on the selected file and bounds.\n\n            Args:\n                change: The change event triggered by the FileChooser.\n\n            Returns:\n                None\n            \"\"\"\n            selected_file = image_chooser.selected\n            if not selected_file:\n                # Remove the current image overlay if no file is selected\n                if current_overlay[\"image\"]:\n                    self.remove(current_overlay[\"image\"])\n                    current_overlay[\"image\"] = None\n            else:\n                # Remove the existing image overlay if it exists\n                if current_overlay[\"image\"]:\n                    self.remove(current_overlay[\"image\"])\n\n                # Use bounds from sliders\n                bounds = [\n                    [lat_min_slider.value, lon_min_slider.value],\n                    [lat_max_slider.value, lon_max_slider.value],\n                ]\n                try:\n                    # Add the new image overlay\n                    overlay = ipyleaflet.ImageOverlay(\n                        url=selected_file,\n                        bounds=bounds,\n                        opacity=image_opacity_slider.value,\n                    )\n                    self.add(overlay)\n                    current_overlay[\"image\"] = overlay\n                except Exception as e:\n                    print(f\"Error adding image overlay: {e}\")\n\n        # Observe changes in the FileChooser\n        image_chooser.register_callback(update_image)\n\n        def update_image_bounds(change):\n            \"\"\"\n            Updates the bounds of the image overlay dynamically.\n\n            Args:\n                change: The change event triggered by the sliders.\n\n            Returns:\n                None\n            \"\"\"\n            if current_overlay[\"image\"]:\n                new_bounds = [\n                    [lat_min_slider.value, lon_min_slider.value],\n                    [lat_max_slider.value, lon_max_slider.value],\n                ]\n                current_overlay[\"image\"].bounds = new_bounds\n\n        # Observe changes in widgets\n        lat_min_slider.observe(update_image_bounds, names=\"value\")\n        lon_min_slider.observe(update_image_bounds, names=\"value\")\n        lat_max_slider.observe(update_image_bounds, names=\"value\")\n        lon_max_slider.observe(update_image_bounds, names=\"value\")\n\n        # Create control panels\n        image_control_panel = widgets.VBox([image_chooser, image_sliders])\n        video_control_panel = widgets.VBox([video_dropdown, video_opacity_slider])\n        cog_control_panel = widgets.VBox([cog_chooser, cog_opacity_slider])\n        geojson_control_panel = widgets.VBox([geojson_chooser])\n        title_control_panel = widgets.VBox([title_input, font_size_slider, font_color_picker, position_dropdown])\n\n        # Create WidgetControl objects\n        image_control = ipyleaflet.WidgetControl(widget=image_control_panel, position=\"topright\")\n        cog_control = ipyleaflet.WidgetControl(widget=cog_control_panel, position=\"topright\")\n        geojson_control = ipyleaflet.WidgetControl(widget=geojson_control_panel, position=\"topright\")\n        title_control_panel_control = ipyleaflet.WidgetControl(widget=title_control_panel, position=\"bottomright\")\n\n        # Add a dropdown and button to change the basemap\n        basemap_dropdown = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"CartoDB.Positron\",\n                \"CartoDB.DarkMatter\",\n            ],\n            value=\"OpenStreetMap.Mapnik\",\n            description=\"Basemap:\",\n            layout=widgets.Layout(width=\"200px\"),\n        )\n\n        apply_basemap_button = widgets.Button(\n            description=\"Apply\",\n            button_style=\"success\",\n            tooltip=\"Apply the selected basemap\",\n            icon=\"map\",\n            layout=widgets.Layout(width=\"80px\"),\n        )\n\n        # Function to update the basemap\n        def update_basemap(b):\n            \"\"\"\n            Updates the basemap on the map based on the selected option.\n\n            Args:\n                b: The button click event.\n\n            Returns:\n                None\n            \"\"\"\n            # Remove all existing tile layers\n            for layer in self.layers:\n                if isinstance(layer, ipyleaflet.TileLayer):\n                    self.remove_layer(layer)\n\n            # Add the selected basemap\n            basemap_name = basemap_dropdown.value\n            try:\n                basemap = eval(f\"ipyleaflet.basemaps.{basemap_name}\")\n                tile_layer = ipyleaflet.TileLayer(url=basemap.build_url(), name=basemap_name)\n                self.add_layer(tile_layer)\n            except Exception as e:\n                print(f\"Error updating basemap: {e}\")\n\n        # Attach the update function to the button\n        apply_basemap_button.on_click(update_basemap)\n\n        # Create a button to toggle the basemap functionality\n        basemap_button = widgets.Button(\n            description=\"Basemap\",\n            button_style=\"info\",\n            tooltip=\"Click to open basemap options\",\n            icon=\"globe\",\n            layout=widgets.Layout(width=\"100px\", height=\"30px\"),\n        )\n\n        # Create a container for the basemap dropdown and apply button\n        basemap_menu = widgets.VBox([basemap_dropdown, apply_basemap_button])\n        basemap_menu.layout.display = \"none\"  # Initially hidden\n\n        # Function to toggle the visibility of the basemap menu\n        def toggle_basemap_menu(b):\n            \"\"\"\n            Toggles the visibility of the basemap menu.\n\n            Args:\n                b: The button click event.\n\n            Returns:\n                None\n            \"\"\"\n            if basemap_menu.layout.display == \"none\":\n                basemap_menu.layout.display = \"flex\"\n                basemap_button.icon = \"eye-slash\"\n            else:\n                basemap_menu.layout.display = \"none\"\n                basemap_button.icon = \"globe\"\n\n        # Attach the toggle function to the basemap button\n        basemap_button.on_click(toggle_basemap_menu)\n\n        # Create a container for the basemap button and menu\n        basemap_control = widgets.VBox([basemap_button, basemap_menu])\n\n        # Add the basemap control to the map\n        self.add_control(ipyleaflet.WidgetControl(widget=basemap_control, position=\"topright\"))\n\n        # Define the toggle_controls function\n        def toggle_controls(change):\n            \"\"\"\n            Toggles the visibility of the control panels based on the selected toggle button.\n\n            Args:\n                change: The change event triggered by the toggle buttons.\n\n            Returns:\n                None\n            \"\"\"\n            # Remove all active controls\n            for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n                if control in self.controls:\n                    self.remove_control(control)\n\n            # Add the corresponding control based on the button pressed\n            if change[\"owner\"].description == \"Title\" and change[\"new\"]:\n                self.add_control(title_control_panel_control)\n            elif change[\"owner\"].description == \"Image\" and change[\"new\"]:\n                self.add_control(image_control)\n            elif change[\"owner\"].description == \"COG\" and change[\"new\"]:\n                self.add_control(cog_control)\n            elif change[\"owner\"].description == \"JSON\" and change[\"new\"]:\n                self.add_control(geojson_control)\n\n        # Create a vertical container for the toggle menu buttons\n        vertical_menu = widgets.VBox(\n            [\n                widgets.ToggleButton(description=\"Title\", value=False, tooltip=\"Title Control\"),\n                widgets.ToggleButton(description=\"Image\", value=False, tooltip=\"Image Control\"),\n                widgets.ToggleButton(description=\"COG\", value=False, tooltip=\"COG Control\"),\n                widgets.ToggleButton(description=\"JSON\", value=False, tooltip=\"GeoJSON Control\"),\n                # Removed basemap_dropdown and apply_basemap_button\n            ],\n            layout=widgets.Layout(\n                display=\"flex\",\n                flex_flow=\"column\",\n                align_items=\"stretch\",\n                width=\"150px\",  # Adjust width as needed\n            ),\n        )\n\n        # Attach the toggle_controls function to each button in the vertical menu\n        for button in vertical_menu.children:\n            button.observe(toggle_controls, names=\"value\")\n\n        # Collapsible menu button\n        collapse_button = widgets.Button(\n            description=\"\",\n            button_style=\"warning\",\n            tooltip=\"Click to hide/show the menu\",\n            icon=\"eye-slash\",\n            layout=widgets.Layout(width=\"40px\", height=\"40px\"),\n        )\n\n        def toggle_menu_visibility(b):\n            \"\"\"\n            Toggles the visibility of the vertical menu and removes all controls when collapsed.\n\n            Args:\n                b: The button click event.\n\n            Returns:\n                None\n            \"\"\"\n            if vertical_menu.layout.display == \"none\":\n                # Show the vertical menu\n                vertical_menu.layout.display = \"flex\"\n                collapse_button.icon = \"eye-slash\"\n            else:\n                # Hide the vertical menu and remove all controls\n                vertical_menu.layout.display = \"none\"\n                collapse_button.icon = \"eye\"\n\n                # Remove all active controls\n                for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n                    if control in self.controls:\n                        self.remove_control(control)\n\n        collapse_button.on_click(toggle_menu_visibility)\n\n        # Add the vertical menu and collapse button to the map\n        self.add_control(ipyleaflet.WidgetControl(widget=collapse_button, position=\"topright\"))\n        self.add_control(ipyleaflet.WidgetControl(widget=vertical_menu, position=\"topright\"))\n\n    def save_map(self):\n        \"\"\"\n        Adds a button to save the current map extent as an HTML file.\n        \"\"\"\n        save_button = widgets.Button(\n            description=\"Save Map\",\n            button_style=\"success\",\n            tooltip=\"Save the current map as an HTML file\",\n            icon=\"download\",\n            layout=widgets.Layout(width=\"100px\", height=\"30px\"),\n        )\n\n        def save_map_as_html(b):\n            \"\"\"\n            Saves the current map as an HTML file.\n            \"\"\"\n            html_file = \"map.html\"\n            try:\n                # Save the map as an HTML file\n                from ipyleaflet import Map\n                Map.save(self, html_file)\n                print(f\"Map saved as {html_file}. Open it in a browser to view.\")\n            except Exception as e:\n                print(f\"Error saving map: {e}\")\n\n        save_button.on_click(save_map_as_html)\n        self.add_control(ipyleaflet.WidgetControl(widget=save_button, position=\"bottomleft\"))\n\n        # Remove GeoParquet-related widgets and controls\n        # Removed geoparquet_chooser\n        # Removed geoparquet_control_panel\n        # Removed geoparquet_control\n\n        # Toggle menu\n        toggle_menu = widgets.ToggleButtons(\n            options=[\"None\", \"Title\", \"Image\", \"COG\", \"JSON\"],  # Removed \"GeoParquet\" option\n            value=None,\n            description=\"\",\n            style={\"button_width\": \"80px\"},\n        )\n\n        def toggle_controls(change):\n            for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n                if control in self.controls:\n                    self.remove_control(control)\n\n            # Add the corresponding control based on the button pressed\n            if change[\"owner\"].description == \"Title\" and change[\"new\"]:\n                self.add_control(title_control_panel_control)\n            elif change[\"owner\"].description == \"Image\" and change[\"new\"]:\n                self.add_control(image_control)\n            elif change[\"new\"] == \"COG\":\n                self.add_control(cog_control)\n            elif change[\"owner\"].description == \"JSON\" and change[\"new\"]:\n                self.add_control(geojson_control)\n\n        toggle_menu.observe(toggle_controls, names=\"value\")\n\n        # Create a vertical container for the toggle menu buttons\n        vertical_menu = widgets.VBox(\n            [\n                widgets.ToggleButton(description=\"Title\", value=False, tooltip=\"Title Control\"),\n                widgets.ToggleButton(description=\"Image\", value=False, tooltip=\"Image Control\"),\n                widgets.ToggleButton(description=\"COG\", value=False, tooltip=\"COG Control\"),\n                widgets.ToggleButton(description=\"JSON\", value=False, tooltip=\"GeoJSON Control\"),\n                # Removed GeoParquet button\n            ],\n            layout=widgets.Layout(\n                display=\"flex\",\n                flex_flow=\"column\",\n                align_items=\"stretch\",\n                width=\"150px\",  # Adjust width as needed\n            ),\n        )\n\n        # Attach the toggle_controls function to each button in the vertical menu\n        for button in vertical_menu.children:\n            button.observe(toggle_controls, names=\"value\")\n\n        # Collapsible menu button\n        collapse_button = widgets.Button(\n            description=\"\",\n            button_style=\"warning\",\n            tooltip=\"Click to hide/show the menu\",\n            icon=\"eye-slash\",\n            layout=widgets.Layout(width=\"40px\", height=\"40px\"),\n        )\n\n        def toggle_menu_visibility(b):\n            \"\"\"\n            Toggles the visibility of the vertical menu and removes all controls when collapsed.\n\n            Args:\n                b: The button click event.\n\n            Returns:\n                None\n            \"\"\"\n            if vertical_menu.layout.display == \"none\":\n                # Show the vertical menu\n                vertical_menu.layout.display = \"flex\"\n                collapse_button.icon = \"eye-slash\"\n            else:\n                # Hide the vertical menu and remove all controls\n                vertical_menu.layout.display = \"none\"\n                collapse_button.icon = \"eye\"\n\n                # Remove all active controls\n                for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n                    if control in self.controls:\n                        self.remove_control(control)\n\n        collapse_button.on_click(toggle_menu_visibility)\n\n        # Add the vertical menu and collapse button to the map\n        self.add_control(ipyleaflet.WidgetControl(widget=collapse_button, position=\"topright\"))\n        self.add_control(ipyleaflet.WidgetControl(widget=vertical_menu, position=\"topright\"))\n</code></pre>"},{"location":"graphs/#salmongis.graphs.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map with a given center, zoom level, and height.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The initial center of the map as [latitude, longitude].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map.</p> <code>2</code> <code>height</code> <code>str</code> <p>The height of the map in pixels or percentage.</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional keyword arguments for <code>ipyleaflet.Map</code>.</p> <code>{}</code> Source code in <code>salmongis/graphs.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"\n    Initializes the map with a given center, zoom level, and height.\n\n    Args:\n        center (list): The initial center of the map as [latitude, longitude].\n        zoom (int): The initial zoom level of the map.\n        height (str): The height of the map in pixels or percentage.\n        **kwargs: Additional keyword arguments for `ipyleaflet.Map`.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n</code></pre>"},{"location":"graphs/#salmongis.graphs.Map.add_combined_ui","title":"<code>add_combined_ui(self, options=None, video_options=None, video_bounds=None, cog_options=None, geojson_options=None, title='Map Title', position='topleft', font_size='16px', font_color='black')</code>","text":"<p>Combines all functionalities (image GUI, video overlay, title, COG, GeoJSON, and basemap selector) into one unified UI with a menu.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>dict</code> <p>A dictionary for image options where keys are image names (strings) and values are tuples containing the image URL (str) and bounds (list).</p> <code>None</code> <code>video_options</code> <code>dict</code> <p>A dictionary for video options where keys are video names (strings) and values are file paths or URLs to the video files.</p> <code>None</code> <code>video_bounds</code> <code>list</code> <p>The geographical bounds for the video overlay as [[lat_min, lon_min], [lat_max, lon_max]].</p> <code>None</code> <code>cog_options</code> <code>dict</code> <p>A dictionary for COG options where keys are COG names (strings) and values are URLs to the COG files.</p> <code>None</code> <code>geojson_options</code> <code>dict</code> <p>A dictionary for GeoJSON options where keys are GeoJSON names (strings) and values are URLs to the GeoJSON files.</p> <code>None</code> <code>title</code> <code>str</code> <p>The initial text of the title to be displayed on the map. Defaults to \"Map Title\".</p> <code>'Map Title'</code> <code>position</code> <code>str</code> <p>The initial position of the title on the map. Defaults to \"topleft\".</p> <code>'topleft'</code> <code>font_size</code> <code>str</code> <p>The initial font size of the title. Defaults to \"16px\".</p> <code>'16px'</code> <code>font_color</code> <code>str</code> <p>The initial font color of the title. Defaults to \"black\".</p> <code>'black'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>salmongis/graphs.py</code> <pre><code>def add_combined_ui(self, options=None, video_options=None, video_bounds=None, cog_options=None, geojson_options=None, title=\"Map Title\", position=\"topleft\", font_size=\"16px\", font_color=\"black\"):\n    \"\"\"\n    Combines all functionalities (image GUI, video overlay, title, COG, GeoJSON, and basemap selector) into one unified UI with a menu.\n\n    Args:\n        options (dict, optional): A dictionary for image options where keys are image names (strings)\n            and values are tuples containing the image URL (str) and bounds (list).\n        video_options (dict, optional): A dictionary for video options where keys are video names (strings)\n            and values are file paths or URLs to the video files.\n        video_bounds (list, optional): The geographical bounds for the video overlay as [[lat_min, lon_min], [lat_max, lon_max]].\n        cog_options (dict, optional): A dictionary for COG options where keys are COG names (strings)\n            and values are URLs to the COG files.\n        geojson_options (dict, optional): A dictionary for GeoJSON options where keys are GeoJSON names (strings)\n            and values are URLs to the GeoJSON files.\n        title (str, optional): The initial text of the title to be displayed on the map. Defaults to \"Map Title\".\n        position (str, optional): The initial position of the title on the map. Defaults to \"topleft\".\n        font_size (str, optional): The initial font size of the title. Defaults to \"16px\".\n        font_color (str, optional): The initial font color of the title. Defaults to \"black\".\n\n    Returns:\n        None\n    \"\"\"\n    # Default options for images, videos, COGs, and GeoJSON\n    options = options or {\n        \"Sample Image 1\": (\"https://example.com/sample1.png\", [[-90, -180], [90, 180]]),\n        \"Sample Image 2\": (\"https://example.com/sample2.png\", [[10, -50], [20, 50]]),\n    }\n    video_options = video_options or {\n        \"Sample Video 1\": \"https://example.com/sample_video1.mp4\",\n        \"Sample Video 2\": \"https://example.com/sample_video2.mp4\",\n    }\n    video_bounds = video_bounds or [[-10, -20], [10, 20]]\n    cog_options = cog_options or {\n        \"Select a COG\": None,\n        \"COG 1\": \"https://example.com/cog1.tif\",\n        \"COG 2\": \"https://example.com/cog2.tif\",\n    }\n    geojson_options = geojson_options or {\n        \"Select a GeoJSON\": None,\n        \"World Countries\": \"https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json\",\n        \"World Cities\": \"https://github.com/opengeos/datasets/releases/download/world/world_cities.geojson\",\n    }\n\n    # Widgets for image selection\n    image_chooser = filechooser.FileChooser()\n    image_chooser.title = \"Select an image file\"\n    image_chooser.filter_pattern = [\"*.png\", \"*.jpg\", \"*.jpeg\"]  # Restrict file types\n    image_chooser.use_dir_icons = True\n\n    # Sliders for image bounds and opacity\n    lat_min_slider = widgets.FloatSlider(value=0, min=-90, max=90, step=0.1, description=\"Lat Min:\")\n    lon_min_slider = widgets.FloatSlider(value=0, min=-180, max=180, step=0.1, description=\"Lon Min:\")\n    lat_max_slider = widgets.FloatSlider(value=0, min=-90, max=90, step=0.1, description=\"Lat Max:\")\n    lon_max_slider = widgets.FloatSlider(value=0, min=-180, max=180, step=0.1, description=\"Lon Max:\")\n    image_opacity_slider = widgets.FloatSlider(value=0.8, min=0, max=1, step=0.1, description=\"Opacity:\")\n    image_sliders = widgets.VBox([lat_min_slider, lon_min_slider, lat_max_slider, lon_max_slider, image_opacity_slider])\n\n    # Widgets for video overlay\n    video_dropdown = widgets.Dropdown(\n        options=[\"Select a video\"] + list(video_options.keys()),\n        value=\"Select a video\",\n        description=\"Video:\",\n    )\n    video_opacity_slider = widgets.FloatSlider(value=0.7, min=0, max=1, step=0.1, description=\"Opacity:\")\n\n    # Widgets for COG selection\n    cog_chooser = filechooser.FileChooser()\n    cog_chooser.title = \"Select a COG file\"\n    cog_chooser.filter_pattern = [\"*.tif\", \"*.tiff\"]  # Restrict file types to TIFF\n    cog_chooser.use_dir_icons = True\n\n    cog_opacity_slider = widgets.FloatSlider(value=0.8, min=0, max=1, step=0.1, description=\"Opacity:\")\n\n    # Function to add or update the COG layer\n    def add_cog_layer(change):\n        \"\"\"\n        Adds or updates the COG layer on the map based on the selected file and opacity.\n\n        Args:\n            change: The change event triggered by the FileChooser or opacity slider.\n\n        Returns:\n            None\n        \"\"\"\n        selected_file = cog_chooser.selected\n        if not selected_file:\n            # Remove the current COG layer if no file is selected\n            if current_overlay[\"cog\"]:\n                self.remove(current_overlay[\"cog\"])\n                current_overlay[\"cog\"] = None\n        else:\n            # Remove the existing COG layer if it exists\n            if current_overlay[\"cog\"]:\n                self.remove(current_overlay[\"cog\"])\n            try:\n                # Add the new COG layer\n                client = TileClient(selected_file)\n                cog_layer = get_leaflet_tile_layer(client, opacity=cog_opacity_slider.value)\n                self.add(cog_layer)\n                current_overlay[\"cog\"] = cog_layer\n\n                # Zoom to the bounds of the COG layer\n                self.fit_bounds(client.bounds)\n            except Exception as e:\n                print(f\"Error adding COG layer: {e}\")\n\n    # Observe changes in the FileChooser\n    cog_chooser.register_callback(add_cog_layer)\n\n    # Observe changes in the opacity slider\n    cog_opacity_slider.observe(add_cog_layer, names=\"value\")\n\n    # Create the COG control panel\n    cog_control_panel = widgets.VBox([cog_chooser, cog_opacity_slider])\n    cog_control = ipyleaflet.WidgetControl(widget=cog_control_panel, position=\"topright\")\n\n    # Widgets for GeoJSON selection\n    geojson_chooser = filechooser.FileChooser()\n    geojson_chooser.title = \"Select a GeoJSON file\"\n    geojson_chooser.filter_pattern = [\"*.geojson\", \"*.json\"]  # Restrict file types to GeoJSON/JSON\n    geojson_chooser.use_dir_icons = True\n\n    # Function to add or update the GeoJSON layer\n    def update_geojson(change):\n        \"\"\"\n        Adds or updates the GeoJSON layer on the map based on the selected file.\n\n        Args:\n            change: The change event triggered by the FileChooser.\n\n        Returns:\n            None\n        \"\"\"\n        selected_file = geojson_chooser.selected\n        if not selected_file:\n            # Remove the current GeoJSON layer if no file is selected\n            if current_overlay[\"geojson\"]:\n                self.remove_layer(current_overlay[\"geojson\"])\n                current_overlay[\"geojson\"] = None\n        else:\n            # Remove the existing GeoJSON layer if it exists\n            if current_overlay[\"geojson\"]:\n                self.remove_layer(current_overlay[\"geojson\"])\n            try:\n                # Load the GeoJSON data from the selected file\n                with open(selected_file, \"r\") as f:\n                    geojson_data = f.read()\n                geojson_layer = GeoJSON(data=json.loads(geojson_data))  # Ensure data is parsed as JSON\n                self.add_layer(geojson_layer)\n                current_overlay[\"geojson\"] = geojson_layer\n\n                # Zoom to the bounds of the GeoJSON layer\n                if hasattr(geojson_layer, \"bounds\"):\n                    self.fit_bounds(geojson_layer.bounds)\n                else:\n                    print(\"GeoJSON layer does not have bounds.\")\n            except Exception as e:\n                print(f\"Error loading GeoJSON: {e}\")\n\n    # Observe changes in the FileChooser\n    geojson_chooser.register_callback(update_geojson)\n\n    # Create the GeoJSON control panel\n    geojson_control_panel = widgets.VBox([geojson_chooser])\n    geojson_control = ipyleaflet.WidgetControl(widget=geojson_control_panel, position=\"topright\")\n\n\n\n    # Widgets for title\n    title_input = widgets.Text(value=title, description=\"Title:\")\n    font_size_slider = widgets.IntSlider(value=int(font_size[:-2]), min=10, max=50, step=1, description=\"Font Size:\")\n    font_color_picker = widgets.ColorPicker(value=font_color, description=\"Font Color:\")\n    position_dropdown = widgets.Dropdown(\n        options=[\"topcenter\", \"topright\", \"topleft\", \"bottomright\", \"bottomleft\"],\n        value=position,\n        description=\"Position:\",\n    )\n\n    # Title control panel\n    title_control_panel = widgets.VBox([title_input, font_size_slider, font_color_picker, position_dropdown])\n    title_control_panel_control = ipyleaflet.WidgetControl(widget=title_control_panel, position=\"bottomright\")\n\n    # Function to update the title\n    def update_title(change):\n        \"\"\"\n        Updates the title widget on the map based on user input.\n\n        Args:\n            change: The change event triggered by the widgets.\n\n        Returns:\n            None\n        \"\"\"\n        title_widget.value = (\n            f\"&lt;div style='color:{font_color_picker.value}; font-size:{font_size_slider.value}px; text-align:center;'&gt;\"\n            f\"{title_input.value}&lt;/div&gt;\"\n        )\n        if self.title_control in self.controls:\n            self.remove_control(self.title_control)\n        self.title_control = ipyleaflet.WidgetControl(widget=title_widget, position=position_dropdown.value)\n        self.add_control(self.title_control)\n\n    # Initialize the title widget\n    title_widget = widgets.HTML(\n        value=f\"&lt;div style='color:{font_color}; font-size:{font_size}; text-align:center; background-color: transparent;'&gt;{title}&lt;/div&gt;\"\n    )\n    self.title_control = ipyleaflet.WidgetControl(widget=title_widget, position=position)\n    self.add_control(self.title_control)\n\n    # Observe changes in title widgets\n    title_input.observe(update_title, names=\"value\")\n    font_size_slider.observe(update_title, names=\"value\")\n    font_color_picker.observe(update_title, names=\"value\")\n    position_dropdown.observe(update_title, names=\"value\")\n\n    # Dictionary to keep track of overlays\n    current_overlay = {\"image\": None, \"cog\": None, \"geojson\": None}\n\n    # Functions for updating the map\n    def update_image(change):\n        \"\"\"\n        Updates the image overlay on the map based on the selected file and bounds.\n\n        Args:\n            change: The change event triggered by the FileChooser.\n\n        Returns:\n            None\n        \"\"\"\n        selected_file = image_chooser.selected\n        if not selected_file:\n            # Remove the current image overlay if no file is selected\n            if current_overlay[\"image\"]:\n                self.remove(current_overlay[\"image\"])\n                current_overlay[\"image\"] = None\n        else:\n            # Remove the existing image overlay if it exists\n            if current_overlay[\"image\"]:\n                self.remove(current_overlay[\"image\"])\n\n            # Use bounds from sliders\n            bounds = [\n                [lat_min_slider.value, lon_min_slider.value],\n                [lat_max_slider.value, lon_max_slider.value],\n            ]\n            try:\n                # Add the new image overlay\n                overlay = ipyleaflet.ImageOverlay(\n                    url=selected_file,\n                    bounds=bounds,\n                    opacity=image_opacity_slider.value,\n                )\n                self.add(overlay)\n                current_overlay[\"image\"] = overlay\n            except Exception as e:\n                print(f\"Error adding image overlay: {e}\")\n\n    # Observe changes in the FileChooser\n    image_chooser.register_callback(update_image)\n\n    def update_image_bounds(change):\n        \"\"\"\n        Updates the bounds of the image overlay dynamically.\n\n        Args:\n            change: The change event triggered by the sliders.\n\n        Returns:\n            None\n        \"\"\"\n        if current_overlay[\"image\"]:\n            new_bounds = [\n                [lat_min_slider.value, lon_min_slider.value],\n                [lat_max_slider.value, lon_max_slider.value],\n            ]\n            current_overlay[\"image\"].bounds = new_bounds\n\n    # Observe changes in widgets\n    lat_min_slider.observe(update_image_bounds, names=\"value\")\n    lon_min_slider.observe(update_image_bounds, names=\"value\")\n    lat_max_slider.observe(update_image_bounds, names=\"value\")\n    lon_max_slider.observe(update_image_bounds, names=\"value\")\n\n    # Create control panels\n    image_control_panel = widgets.VBox([image_chooser, image_sliders])\n    video_control_panel = widgets.VBox([video_dropdown, video_opacity_slider])\n    cog_control_panel = widgets.VBox([cog_chooser, cog_opacity_slider])\n    geojson_control_panel = widgets.VBox([geojson_chooser])\n    title_control_panel = widgets.VBox([title_input, font_size_slider, font_color_picker, position_dropdown])\n\n    # Create WidgetControl objects\n    image_control = ipyleaflet.WidgetControl(widget=image_control_panel, position=\"topright\")\n    cog_control = ipyleaflet.WidgetControl(widget=cog_control_panel, position=\"topright\")\n    geojson_control = ipyleaflet.WidgetControl(widget=geojson_control_panel, position=\"topright\")\n    title_control_panel_control = ipyleaflet.WidgetControl(widget=title_control_panel, position=\"bottomright\")\n\n    # Add a dropdown and button to change the basemap\n    basemap_dropdown = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap.Mapnik\",\n            \"OpenTopoMap\",\n            \"CartoDB.Positron\",\n            \"CartoDB.DarkMatter\",\n        ],\n        value=\"OpenStreetMap.Mapnik\",\n        description=\"Basemap:\",\n        layout=widgets.Layout(width=\"200px\"),\n    )\n\n    apply_basemap_button = widgets.Button(\n        description=\"Apply\",\n        button_style=\"success\",\n        tooltip=\"Apply the selected basemap\",\n        icon=\"map\",\n        layout=widgets.Layout(width=\"80px\"),\n    )\n\n    # Function to update the basemap\n    def update_basemap(b):\n        \"\"\"\n        Updates the basemap on the map based on the selected option.\n\n        Args:\n            b: The button click event.\n\n        Returns:\n            None\n        \"\"\"\n        # Remove all existing tile layers\n        for layer in self.layers:\n            if isinstance(layer, ipyleaflet.TileLayer):\n                self.remove_layer(layer)\n\n        # Add the selected basemap\n        basemap_name = basemap_dropdown.value\n        try:\n            basemap = eval(f\"ipyleaflet.basemaps.{basemap_name}\")\n            tile_layer = ipyleaflet.TileLayer(url=basemap.build_url(), name=basemap_name)\n            self.add_layer(tile_layer)\n        except Exception as e:\n            print(f\"Error updating basemap: {e}\")\n\n    # Attach the update function to the button\n    apply_basemap_button.on_click(update_basemap)\n\n    # Create a button to toggle the basemap functionality\n    basemap_button = widgets.Button(\n        description=\"Basemap\",\n        button_style=\"info\",\n        tooltip=\"Click to open basemap options\",\n        icon=\"globe\",\n        layout=widgets.Layout(width=\"100px\", height=\"30px\"),\n    )\n\n    # Create a container for the basemap dropdown and apply button\n    basemap_menu = widgets.VBox([basemap_dropdown, apply_basemap_button])\n    basemap_menu.layout.display = \"none\"  # Initially hidden\n\n    # Function to toggle the visibility of the basemap menu\n    def toggle_basemap_menu(b):\n        \"\"\"\n        Toggles the visibility of the basemap menu.\n\n        Args:\n            b: The button click event.\n\n        Returns:\n            None\n        \"\"\"\n        if basemap_menu.layout.display == \"none\":\n            basemap_menu.layout.display = \"flex\"\n            basemap_button.icon = \"eye-slash\"\n        else:\n            basemap_menu.layout.display = \"none\"\n            basemap_button.icon = \"globe\"\n\n    # Attach the toggle function to the basemap button\n    basemap_button.on_click(toggle_basemap_menu)\n\n    # Create a container for the basemap button and menu\n    basemap_control = widgets.VBox([basemap_button, basemap_menu])\n\n    # Add the basemap control to the map\n    self.add_control(ipyleaflet.WidgetControl(widget=basemap_control, position=\"topright\"))\n\n    # Define the toggle_controls function\n    def toggle_controls(change):\n        \"\"\"\n        Toggles the visibility of the control panels based on the selected toggle button.\n\n        Args:\n            change: The change event triggered by the toggle buttons.\n\n        Returns:\n            None\n        \"\"\"\n        # Remove all active controls\n        for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n            if control in self.controls:\n                self.remove_control(control)\n\n        # Add the corresponding control based on the button pressed\n        if change[\"owner\"].description == \"Title\" and change[\"new\"]:\n            self.add_control(title_control_panel_control)\n        elif change[\"owner\"].description == \"Image\" and change[\"new\"]:\n            self.add_control(image_control)\n        elif change[\"owner\"].description == \"COG\" and change[\"new\"]:\n            self.add_control(cog_control)\n        elif change[\"owner\"].description == \"JSON\" and change[\"new\"]:\n            self.add_control(geojson_control)\n\n    # Create a vertical container for the toggle menu buttons\n    vertical_menu = widgets.VBox(\n        [\n            widgets.ToggleButton(description=\"Title\", value=False, tooltip=\"Title Control\"),\n            widgets.ToggleButton(description=\"Image\", value=False, tooltip=\"Image Control\"),\n            widgets.ToggleButton(description=\"COG\", value=False, tooltip=\"COG Control\"),\n            widgets.ToggleButton(description=\"JSON\", value=False, tooltip=\"GeoJSON Control\"),\n            # Removed basemap_dropdown and apply_basemap_button\n        ],\n        layout=widgets.Layout(\n            display=\"flex\",\n            flex_flow=\"column\",\n            align_items=\"stretch\",\n            width=\"150px\",  # Adjust width as needed\n        ),\n    )\n\n    # Attach the toggle_controls function to each button in the vertical menu\n    for button in vertical_menu.children:\n        button.observe(toggle_controls, names=\"value\")\n\n    # Collapsible menu button\n    collapse_button = widgets.Button(\n        description=\"\",\n        button_style=\"warning\",\n        tooltip=\"Click to hide/show the menu\",\n        icon=\"eye-slash\",\n        layout=widgets.Layout(width=\"40px\", height=\"40px\"),\n    )\n\n    def toggle_menu_visibility(b):\n        \"\"\"\n        Toggles the visibility of the vertical menu and removes all controls when collapsed.\n\n        Args:\n            b: The button click event.\n\n        Returns:\n            None\n        \"\"\"\n        if vertical_menu.layout.display == \"none\":\n            # Show the vertical menu\n            vertical_menu.layout.display = \"flex\"\n            collapse_button.icon = \"eye-slash\"\n        else:\n            # Hide the vertical menu and remove all controls\n            vertical_menu.layout.display = \"none\"\n            collapse_button.icon = \"eye\"\n\n            # Remove all active controls\n            for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n                if control in self.controls:\n                    self.remove_control(control)\n\n    collapse_button.on_click(toggle_menu_visibility)\n\n    # Add the vertical menu and collapse button to the map\n    self.add_control(ipyleaflet.WidgetControl(widget=collapse_button, position=\"topright\"))\n    self.add_control(ipyleaflet.WidgetControl(widget=vertical_menu, position=\"topright\"))\n</code></pre>"},{"location":"graphs/#salmongis.graphs.Map.save_map","title":"<code>save_map(self)</code>","text":"<p>Adds a button to save the current map extent as an HTML file.</p> Source code in <code>salmongis/graphs.py</code> <pre><code>def save_map(self):\n    \"\"\"\n    Adds a button to save the current map extent as an HTML file.\n    \"\"\"\n    save_button = widgets.Button(\n        description=\"Save Map\",\n        button_style=\"success\",\n        tooltip=\"Save the current map as an HTML file\",\n        icon=\"download\",\n        layout=widgets.Layout(width=\"100px\", height=\"30px\"),\n    )\n\n    def save_map_as_html(b):\n        \"\"\"\n        Saves the current map as an HTML file.\n        \"\"\"\n        html_file = \"map.html\"\n        try:\n            # Save the map as an HTML file\n            from ipyleaflet import Map\n            Map.save(self, html_file)\n            print(f\"Map saved as {html_file}. Open it in a browser to view.\")\n        except Exception as e:\n            print(f\"Error saving map: {e}\")\n\n    save_button.on_click(save_map_as_html)\n    self.add_control(ipyleaflet.WidgetControl(widget=save_button, position=\"bottomleft\"))\n\n    # Remove GeoParquet-related widgets and controls\n    # Removed geoparquet_chooser\n    # Removed geoparquet_control_panel\n    # Removed geoparquet_control\n\n    # Toggle menu\n    toggle_menu = widgets.ToggleButtons(\n        options=[\"None\", \"Title\", \"Image\", \"COG\", \"JSON\"],  # Removed \"GeoParquet\" option\n        value=None,\n        description=\"\",\n        style={\"button_width\": \"80px\"},\n    )\n\n    def toggle_controls(change):\n        for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n            if control in self.controls:\n                self.remove_control(control)\n\n        # Add the corresponding control based on the button pressed\n        if change[\"owner\"].description == \"Title\" and change[\"new\"]:\n            self.add_control(title_control_panel_control)\n        elif change[\"owner\"].description == \"Image\" and change[\"new\"]:\n            self.add_control(image_control)\n        elif change[\"new\"] == \"COG\":\n            self.add_control(cog_control)\n        elif change[\"owner\"].description == \"JSON\" and change[\"new\"]:\n            self.add_control(geojson_control)\n\n    toggle_menu.observe(toggle_controls, names=\"value\")\n\n    # Create a vertical container for the toggle menu buttons\n    vertical_menu = widgets.VBox(\n        [\n            widgets.ToggleButton(description=\"Title\", value=False, tooltip=\"Title Control\"),\n            widgets.ToggleButton(description=\"Image\", value=False, tooltip=\"Image Control\"),\n            widgets.ToggleButton(description=\"COG\", value=False, tooltip=\"COG Control\"),\n            widgets.ToggleButton(description=\"JSON\", value=False, tooltip=\"GeoJSON Control\"),\n            # Removed GeoParquet button\n        ],\n        layout=widgets.Layout(\n            display=\"flex\",\n            flex_flow=\"column\",\n            align_items=\"stretch\",\n            width=\"150px\",  # Adjust width as needed\n        ),\n    )\n\n    # Attach the toggle_controls function to each button in the vertical menu\n    for button in vertical_menu.children:\n        button.observe(toggle_controls, names=\"value\")\n\n    # Collapsible menu button\n    collapse_button = widgets.Button(\n        description=\"\",\n        button_style=\"warning\",\n        tooltip=\"Click to hide/show the menu\",\n        icon=\"eye-slash\",\n        layout=widgets.Layout(width=\"40px\", height=\"40px\"),\n    )\n\n    def toggle_menu_visibility(b):\n        \"\"\"\n        Toggles the visibility of the vertical menu and removes all controls when collapsed.\n\n        Args:\n            b: The button click event.\n\n        Returns:\n            None\n        \"\"\"\n        if vertical_menu.layout.display == \"none\":\n            # Show the vertical menu\n            vertical_menu.layout.display = \"flex\"\n            collapse_button.icon = \"eye-slash\"\n        else:\n            # Hide the vertical menu and remove all controls\n            vertical_menu.layout.display = \"none\"\n            collapse_button.icon = \"eye\"\n\n            # Remove all active controls\n            for control in [image_control, cog_control, title_control_panel_control, geojson_control]:\n                if control in self.controls:\n                    self.remove_control(control)\n\n    collapse_button.on_click(toggle_menu_visibility)\n\n    # Add the vertical menu and collapse button to the map\n    self.add_control(ipyleaflet.WidgetControl(widget=collapse_button, position=\"topright\"))\n    self.add_control(ipyleaflet.WidgetControl(widget=vertical_menu, position=\"topright\"))\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install salmongis, run this command in your terminal:</p> <pre><code>pip install salmongis\n</code></pre> <p>This is the preferred method to install salmongis, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install salmongis from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/GISCreations/salmongis\n</code></pre>"},{"location":"salmongis/","title":"salmongis module","text":"<p>Main module.</p>"},{"location":"salmongis/#salmongis.salmongis.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom map class extending ipyleaflet.Map.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"A custom map class extending ipyleaflet.Map.\"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"\n        Initializes the map with a given center, zoom level, and height.\n\n        Args:\n            center (list): The initial center of the map as [latitude, longitude].\n            zoom (int): The initial zoom level of the map.\n            height (str): The height of the map in pixels or percentage.\n            **kwargs: Additional keyword arguments for ipyleaflet.Map.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"\n        Adds a basemap layer to the map.\n\n        Args:\n            basemap (str): The name of the basemap to add. Must be a valid basemap\n                available in ipyleaflet.basemaps.\n        \"\"\"\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control widget to the map.\n\n        The layer control allows users to toggle visibility of layers on the map.\n        \"\"\"\n        control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add(control)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"\n        Adds a Google Maps layer to the map.\n\n        Args:\n            map_type (str): The type of Google Map to add. Options are:\n                \"ROADMAP\", \"SATELLITE\", \"TERRAIN\", \"HYBRID\".\n        \"\"\"\n        map_types = {\n            \"ROADMAP\": \"m\",\n            \"SATELLITE\": \"s\",\n            \"TERRAIN\": \"p\",\n            \"HYBRID\": \"y\",\n        }\n\n        map_type = map_types[map_type]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(ur1=url, name=\"Google Map\")\n        self.add(layer)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"\n        Adds a vector layer to the map from a GeoJSON or file.\n\n        Args:\n            data (str): The path or URL to the vector data (e.g., GeoJSON file).\n            **kwargs: Additional keyword arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n        import geopandas as gpd\n\n        # Load the data into a GeoDataFrame\n        gdf = gpd.read_file(data)\n\n        # Reproject to EPSG:4326\n        gdf = gdf.to_crs(epsg=4326)\n\n        # Convert to GeoJSON\n        geojson = gdf.__geo_interface__\n\n        # Add the GeoJSON layer to the map\n        self.add_layer(ipyleaflet.GeoJSON(data=geojson, **kwargs))\n\n    def add_raster(self, filepath, **kwargs):\n        from localtileserver import TileClient, get_leaflet_tile_layer \n        client = TileClient(filepath)\n        tile_layer = get_leaflet_tile_layer(client, **kwargs)\n        self = Map(zoom=3)\n        self.add(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image (self, image, bounds=None, **kwargs):\n        \"\"\"Adds an image to the map.\n        Args: image (str): The file path to the image.\n\n        bounds (list, optional): The bounds for the image. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet. ImageOverlay layer.\n        \"\"\"\n        if bounds is None: \n            bounds = [[-90, -180], [90, 180]]\n        overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n        self.add(overlay)\n\n    def add_video(self, video, bounds = None, **kwargs):\n        \"\"\"Adds a video to the map.\n        Args: video (str): The file path to the video.\n\n        bounds (list, optional): The bounds for the video. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet. VideoOverlay layer.\n        \"\"\"\n        if bounds is None: \n            bounds = [[-90, -180], [90, 180]]\n        overlay = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n        self.add(overlay)\n\n    def add_wms_layer(self, url, layers, format = \"image/png\", transparent = True, **kwargs):\n        \"\"\"\n        Adds a WMS layer to the map.\n\n        Args:\n            url (str): The WMS service URL.\n            layers (str): The layers to be displayed.\n            **kwargs: Additional keyword arguments for ipyleaflet.WMSLayer.\n        \"\"\"\n        wms_layer = ipyleaflet.WMSLayer(url=url, layers=layers, format = format, transparent = transparent,  **kwargs)\n        self.add(wms_layer)\n\n    def add_dataset(self, dataset, var, file_name=None, **kwargs):\n        \"\"\"\n        Adds a dataset to the map and optionally saves the plot.\n\n        Args:\n            dataset (str): The path or URL to the dataset (e.g., NetCDF file).\n            var (str): The variable in the dataset to plot.\n            file_name (str, optional): The file name to save the plot. Defaults to None.\n            **kwargs: Additional keyword arguments for ipyleaflet.GeoJSON.\n        \"\"\"\n        import geopandas as gpd\n        import matplotlib.pyplot as plt\n\n        # Load the dataset into an xarray Dataset\n        ds = xr.open_dataset(dataset)\n        plotted = ds[var]\n\n        # Plot the variable\n        plotted.plot()\n\n        # Save the plot if a file name is provided\n        if file_name:\n            plt.savefig(file_name)\n            print(f\"Plot saved as {file_name}\")\n\n        return plotted\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map with a given center, zoom level, and height.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The initial center of the map as [latitude, longitude].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map.</p> <code>2</code> <code>height</code> <code>str</code> <p>The height of the map in pixels or percentage.</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.Map.</p> <code>{}</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"\n    Initializes the map with a given center, zoom level, and height.\n\n    Args:\n        center (list): The initial center of the map as [latitude, longitude].\n        zoom (int): The initial zoom level of the map.\n        height (str): The height of the map in pixels or percentage.\n        **kwargs: Additional keyword arguments for ipyleaflet.Map.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Adds a basemap layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap to add. Must be a valid basemap available in ipyleaflet.basemaps.</p> <code>'OpenTopoMap'</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"\n    Adds a basemap layer to the map.\n\n    Args:\n        basemap (str): The name of the basemap to add. Must be a valid basemap\n            available in ipyleaflet.basemaps.\n    \"\"\"\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add_layer(layer)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_dataset","title":"<code>add_dataset(self, dataset, var, file_name=None, **kwargs)</code>","text":"<p>Adds a dataset to the map and optionally saves the plot.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>str</code> <p>The path or URL to the dataset (e.g., NetCDF file).</p> required <code>var</code> <code>str</code> <p>The variable in the dataset to plot.</p> required <code>file_name</code> <code>str</code> <p>The file name to save the plot. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_dataset(self, dataset, var, file_name=None, **kwargs):\n    \"\"\"\n    Adds a dataset to the map and optionally saves the plot.\n\n    Args:\n        dataset (str): The path or URL to the dataset (e.g., NetCDF file).\n        var (str): The variable in the dataset to plot.\n        file_name (str, optional): The file name to save the plot. Defaults to None.\n        **kwargs: Additional keyword arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n    import geopandas as gpd\n    import matplotlib.pyplot as plt\n\n    # Load the dataset into an xarray Dataset\n    ds = xr.open_dataset(dataset)\n    plotted = ds[var]\n\n    # Plot the variable\n    plotted.plot()\n\n    # Save the plot if a file name is provided\n    if file_name:\n        plt.savefig(file_name)\n        print(f\"Plot saved as {file_name}\")\n\n    return plotted\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Adds a Google Maps layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>The type of Google Map to add. Options are: \"ROADMAP\", \"SATELLITE\", \"TERRAIN\", \"HYBRID\".</p> <code>'ROADMAP'</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"\n    Adds a Google Maps layer to the map.\n\n    Args:\n        map_type (str): The type of Google Map to add. Options are:\n            \"ROADMAP\", \"SATELLITE\", \"TERRAIN\", \"HYBRID\".\n    \"\"\"\n    map_types = {\n        \"ROADMAP\": \"m\",\n        \"SATELLITE\": \"s\",\n        \"TERRAIN\": \"p\",\n        \"HYBRID\": \"y\",\n    }\n\n    map_type = map_types[map_type]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(ur1=url, name=\"Google Map\")\n    self.add(layer)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_image","title":"<code>add_image(self, image, bounds=None, **kwargs)</code>","text":"<p>Adds an image to the map.</p> <p>image (str): The file path to the image.</p> <p>bounds (list, optional): The bounds for the image. Defaults to None. **kwargs: Additional keyword arguments for the ipyleaflet. ImageOverlay layer.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_image (self, image, bounds=None, **kwargs):\n    \"\"\"Adds an image to the map.\n    Args: image (str): The file path to the image.\n\n    bounds (list, optional): The bounds for the image. Defaults to None.\n    **kwargs: Additional keyword arguments for the ipyleaflet. ImageOverlay layer.\n    \"\"\"\n    if bounds is None: \n        bounds = [[-90, -180], [90, 180]]\n    overlay = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n    self.add(overlay)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> <p>The layer control allows users to toggle visibility of layers on the map.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control widget to the map.\n\n    The layer control allows users to toggle visibility of layers on the map.\n    \"\"\"\n    control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add(control)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds a vector layer to the map from a GeoJSON or file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path or URL to the vector data (e.g., GeoJSON file).</p> required <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"\n    Adds a vector layer to the map from a GeoJSON or file.\n\n    Args:\n        data (str): The path or URL to the vector data (e.g., GeoJSON file).\n        **kwargs: Additional keyword arguments for ipyleaflet.GeoJSON.\n    \"\"\"\n    import geopandas as gpd\n\n    # Load the data into a GeoDataFrame\n    gdf = gpd.read_file(data)\n\n    # Reproject to EPSG:4326\n    gdf = gdf.to_crs(epsg=4326)\n\n    # Convert to GeoJSON\n    geojson = gdf.__geo_interface__\n\n    # Add the GeoJSON layer to the map\n    self.add_layer(ipyleaflet.GeoJSON(data=geojson, **kwargs))\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_video","title":"<code>add_video(self, video, bounds=None, **kwargs)</code>","text":"<p>Adds a video to the map.</p> <p>video (str): The file path to the video.</p> <p>bounds (list, optional): The bounds for the video. Defaults to None. **kwargs: Additional keyword arguments for the ipyleaflet. VideoOverlay layer.</p> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_video(self, video, bounds = None, **kwargs):\n    \"\"\"Adds a video to the map.\n    Args: video (str): The file path to the video.\n\n    bounds (list, optional): The bounds for the video. Defaults to None.\n    **kwargs: Additional keyword arguments for the ipyleaflet. VideoOverlay layer.\n    \"\"\"\n    if bounds is None: \n        bounds = [[-90, -180], [90, 180]]\n    overlay = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n    self.add(overlay)\n</code></pre>"},{"location":"salmongis/#salmongis.salmongis.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Adds a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The WMS service URL.</p> required <code>layers</code> <code>str</code> <p>The layers to be displayed.</p> required <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.WMSLayer.</p> <code>{}</code> Source code in <code>salmongis/salmongis.py</code> <pre><code>def add_wms_layer(self, url, layers, format = \"image/png\", transparent = True, **kwargs):\n    \"\"\"\n    Adds a WMS layer to the map.\n\n    Args:\n        url (str): The WMS service URL.\n        layers (str): The layers to be displayed.\n        **kwargs: Additional keyword arguments for ipyleaflet.WMSLayer.\n    \"\"\"\n    wms_layer = ipyleaflet.WMSLayer(url=url, layers=layers, format = format, transparent = transparent,  **kwargs)\n    self.add(wms_layer)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use salmongis in a project:</p> <pre><code>import salmongis\nimport salmongis.graphs\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import salmongis.foliumap as salmongis\n</pre> import salmongis.foliumap as salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=[20, -180], zoom=2)\nurl = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\nm.add_geojson(url)\nm.add_layer_control()\nm\n</pre> m = salmongis.Map(center=[20, -180], zoom=2) url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" m.add_geojson(url) m.add_layer_control() m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>m = salmongis.Map(center=(40, -100), zoom=4)\nm.add_split_map(\"OpenStreetMap\", \"Stamen Terrain\")\nm\n</pre> m = salmongis.Map(center=(40, -100), zoom=4) m.add_split_map(\"OpenStreetMap\", \"Stamen Terrain\") m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/folium/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import salmongis\nimport salmongis.graphs as sg\n</pre> import salmongis import salmongis.graphs as sg  In\u00a0[2]: Copied! <pre>#This package is used to create a map with a combined UI\n\nm = sg.Map()\n\n#Add the combined ui function to the map. This is the only function in this package.\nm.add_combined_ui()\nm\n</pre> #This package is used to create a map with a combined UI  m = sg.Map()  #Add the combined ui function to the map. This is the only function in this package. m.add_combined_ui() m Out[2]:"},{"location":"examples/intro/#graphs-demo","title":"Graphs Demo\u00b6","text":""},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[\u00a0]: Copied! In\u00a0[1]: Copied! <pre>import salmongis\n</pre> import salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=[40, -100], zoom=4)\nm.add_basemap(basemap=\"Gaode.Satellite\")\nm.add_layer_control()\nm.add_vector(\n    \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\n)\nm\n</pre> m = salmongis.Map(center=[40, -100], zoom=4) m.add_basemap(basemap=\"Gaode.Satellite\") m.add_layer_control() m.add_vector(     \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" ) m Out[2]: In\u00a0[3]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = [38.128, 2.588]\nzoom = 5\nMap(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom)\n</pre> from ipyleaflet import Map, basemaps  center = [38.128, 2.588] zoom = 5 Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom) Out[3]: In\u00a0[4]: Copied! <pre>basemaps.OpenTopoMap.url\n</pre> basemaps.OpenTopoMap.url Out[4]: <pre>'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png'</pre> In\u00a0[5]: Copied! <pre>from salmongis import salmongis\n</pre> from salmongis import salmongis In\u00a0[6]: Copied! <pre>import salmongis.salmongis as salmongis\n</pre> import salmongis.salmongis as salmongis In\u00a0[7]: Copied! <pre>m = salmongis.Map()\nm\n</pre> m = salmongis.Map() m Out[7]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> Out[\u00a0]: <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre>"},{"location":"examples/ipyleaflet/#ipyleaflet-demo","title":"Ipyleaflet demo\u00b6","text":"<p>](https: //github.com/GISCreations/salmongis/tree/main/docs/examples/ipyleaflet.ipynb)</p>"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import salmongis\n</pre> import salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=[40, -100], zoom=4)\nm.add_layer_control()\nm\n</pre> m = salmongis.Map(center=[40, -100], zoom=4) m.add_layer_control() m Out[2]: In\u00a0[3]: Copied! <pre>filename = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\"\nm.add_raster(filename, indexes=[5, 4, 3,], name=\"landsat\", opacity=0.5, zoom_to_layer=True)\nm\n</pre> filename = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_90m.tif\" m.add_raster(filename, indexes=[5, 4, 3,], name=\"landsat\", opacity=0.5, zoom_to_layer=True) m Out[3]: In\u00a0[4]: Copied! <pre>url=\"https://geography.utk.edu/wp-content/uploads/2023/10/Michael_Camponovo.800x1200.webp\"\nbounds= ( (13, -150), (40, -120) )\nm.add_image(url, bounds)\nm\n</pre> url=\"https://geography.utk.edu/wp-content/uploads/2023/10/Michael_Camponovo.800x1200.webp\" bounds= ( (13, -150), (40, -120) ) m.add_image(url, bounds) m Out[4]: In\u00a0[5]: Copied! <pre>url=\"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\"\nlayers = \"USGSNAIPPlus:FalseColorComposite\"\nm.add_wms_layer(url, layers, format = \"image/png\", transparent=True)\nm\n</pre> url=\"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\" layers = \"USGSNAIPPlus:FalseColorComposite\" m.add_wms_layer(url, layers, format = \"image/png\", transparent=True) m Out[5]: In\u00a0[6]: Copied! <pre>url = \"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\"\nbounds = ((37.56238816, -122.515963), (37.563391708, -122.5130939))\nm.add_video(url, bounds)\nm\n</pre> url = \"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\" bounds = ((37.56238816, -122.515963), (37.563391708, -122.5130939)) m.add_video(url, bounds) m Out[6]:"},{"location":"examples/raster/#raster-video-image-demo","title":"Raster / Video / Image Demo\u00b6","text":""},{"location":"examples/split_map/","title":"Split map","text":"In\u00a0[1]: Copied! <pre>import salmongis.foliumap as salmongis\n</pre> import salmongis.foliumap as salmongis In\u00a0[2]: Copied! <pre>m = salmongis.Map(center=(40, -100), zoom=4)\nm.add_split_map(\"OpenStreetMap\", \"Stamen Toner\")\nm\n</pre> m = salmongis.Map(center=(40, -100), zoom=4) m.add_split_map(\"OpenStreetMap\", \"Stamen Toner\") m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"}]}